/*
 * grunt-localcheck
 * https://github.com/vartu/localcheck
 *
 * Copyright (c) 2016 
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(grunt) {

  var chalk = require('chalk');

  grunt.registerMultiTask('localcheck', 'create file with hash for update.', function() {
    var options = this.options({
      footer: "\n/*/localcheck:{hash}/*/",
      separator: grunt.util.linefeed,
      backup : true
    });

    // Iterate over all specified file groups.
    
    var allConfig = {};
    this.files.forEach(function(f) {
      // Concat specified files.
      var src = f.src.filter(function(filepath) {
        // Warn on and remove invalid source files (if nonull was set).
        if (!grunt.file.exists(filepath)) {
          grunt.log.warn('Source file "' + filepath + '" not found.');
          return false;
        } else {
          return true;
        }
      }).map(function(filepath) {
        // Read file source.
        return grunt.file.read(filepath);

      }).join(grunt.util.normalizelf(options.separator));

      // Handle options.
      var crypto = require('crypto'),
        md5sum = crypto.createHash('md5'),
        temp = '',
        md5 = '';

      md5sum.update(src);
      md5 = md5sum.digest('hex');

      temp = options.footer.replace('{hash}', md5);
      src += temp;

      grunt.file.write(f.dest, src);
      grunt.log.writeln('File "' + chalk.cyan(f.dest) + '" created:'+chalk.yellow(temp));

      var filename = f.dest.substr(options.substrstart||0);
      allConfig[filename] = md5;

      replaceFile(f.orig, allConfig);
    });
  });

  function replaceFile(config, jcontent){
    if(!config.hashConfigTo){
      return ;
    }
    if (!grunt.file.exists(config.hashConfigTo)) {
      return grunt.log.warn('File "' + chalk.red(config.hashConfigTo) + '" not found.');
    }

    jcontent = JSON.stringify(jcontent);

    var src = grunt.file.read(config.hashConfigTo),
      reg;

    if(config.backup){
      grunt.file.write(config.hashConfigTo+'.bak', src);
    }

    jcontent = '/*<localcheck>*/ var gFileHashConfig='+jcontent+'; /*</localcheck>*/';

    //if not first append hashConfig; replace it
    if(src.indexOf('/*<localcheck>*/')>-1 && src.indexOf('/*</localcheck>*/')>-1){
      reg = new RegExp('\/\\*<localcheck>\\*\/([\\s\\S]*?)\/\\*<\/localcheck>\\*\/');
      src = src.replace(reg, jcontent);
    //if set hashConfigBlock
    }else{
      grunt.log.writeln('U can set hashconfig to <localcheck></localcheck>"!');
      var scripthtml = '<script type="text/javascript">'+jcontent+'</script>\n',
        index = src.indexOf('</head>');
      index = index<0 ? 0 : index;
      src = src.substr(0, index)+scripthtml+src.substr(index);
    }

    grunt.file.write(config.hashConfigTo, src);
    grunt.log.writeln('File "' + chalk.cyan(config.hashConfigTo) + '" update success!');
  }

};
