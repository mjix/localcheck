/*
 * grunt-localcheck
 * https://github.com/vartu/localcheck
 *
 * Copyright (c) 2016 
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(grunt) {

  var chalk = require('chalk');

  grunt.registerMultiTask('localcheck', 'create file with hash for update.', function() {
    var options = this.options({
      footer: "\n/*/localcheck:{hash}/*/",
      separator: grunt.util.linefeed,
      backup : true
    });

    // Iterate over all specified file groups.
    var allConfig = {},
      hfileConfig = {};
    this.files.forEach(function(f) {
      // Concat specified files.
      var src = f.src.filter(function(filepath) {
        // Warn on and remove invalid source files (if nonull was set).
        if (!grunt.file.exists(filepath)) {
          grunt.log.warn('Source file "' + filepath + '" not found.');
          return false;
        } else {
          return true;
        }
      }).map(function(filepath) {
        // Read file source.
        return grunt.file.read(filepath);

      }).join(grunt.util.normalizelf(options.separator));

      // Handle options.
      var crypto = require('crypto'),
        md5sum = crypto.createHash('md5'),
        temp = '',
        md5 = '';

      md5sum.update(src);
      md5 = md5sum.digest('hex');

      temp = options.footer.replace('{hash}', md5);
      src += temp;

      grunt.file.write(f.dest, src);
      grunt.log.writeln('File "' + chalk.cyan(f.dest) + '" created:'+chalk.yellow(temp));

      var filename = f.orig.getConfigKey ? f.orig.getConfigKey.call(f.orig, f.src[0], f.dest) : f.src[0];
      allConfig[filename] = md5;
      hfileConfig[f.orig.hashConfigTo] = {
        config : f.orig,
        hashs : allConfig
      };
    });

    for(var key in hfileConfig){
      if(hfileConfig.hasOwnProperty(key)){
        replaceFile(hfileConfig[key].config, hfileConfig[key].hashs);

        if(hfileConfig[key].config.hashConfigTo){
          checkInclude(hfileConfig[key].config.hashConfigTo);
        }
      }
    }
  });

  function checkInclude(files){
    if(typeof files=='string'){
      files = [files];
    }

    var src, incMatchs, fileMatchs,
      flag = 'localinclude',
      incReg = new RegExp('/\\*<'+flag+'.*?>\\*/[\\s\\S]*?/\\*</'+flag+'>\\*/', 'g'),
      fileReg = new RegExp('file\\s*=\\s*[\'"]?(.*?)[\'"]');

    files.forEach(function(file){
      src = grunt.file.read(file);
      while((incMatchs = incReg.exec(src)) !== null){
        if(!incMatchs){
          continue;
        }

        var pathindex = file.lastIndexOf('/'),
          path, tsrc, tfile, rfile;
        if(pathindex>-1){
          path = file.substr(0, pathindex)+'/';
        }

        incMatchs.forEach(function(clustr){
          fileMatchs = fileReg.exec(clustr);
          if(!fileMatchs){
            grunt.log.warn('Content "' + clustr + '" not found "file=" attribute.');
            return true;
          }

          rfile = fileMatchs[1].replace(/[\s]+/, '');
          tfile = path+rfile;
          if(!grunt.file.exists(tfile)){
            grunt.log.warn('Include file "' + chalk.cyan(rfile) + '" not found.');
            return false;
          }
          
          tsrc = grunt.file.read(tfile);
          src = src.replace(clustr, '/*<'+flag+' file="'+fileMatchs[1]+'">*/\r'+tsrc+'\r/*</'+flag+'>*/');
          grunt.file.write(file, src);
          grunt.log.writeln('File "' + chalk.cyan(file) + '" include "' + chalk.cyan(rfile) + '" success.');
        });
      }
    });
  }

  function replaceFile(config, jcontent){
    if(!config.hashConfigTo){
      return ;
    }
    if (!grunt.file.exists(config.hashConfigTo)) {
      return grunt.log.warn('File "' + chalk.red(config.hashConfigTo) + '" not found.');
    }

    jcontent = JSON.stringify(jcontent);

    var src = grunt.file.read(config.hashConfigTo),
      reg;

    if(config.backup){
      grunt.file.write(config.hashConfigTo+'.bak', src);
    }

    var flag = 'localcheck';
    jcontent = '/*<'+flag+'>*/\rvar gFileHashConfig='+jcontent+';\r/*</'+flag+'>*/';

    //if not first append hashConfig; replace it
    if(src.indexOf('/*<'+flag+'>*/')>-1 && src.indexOf('/*</'+flag+'>*/')>-1){
      reg = new RegExp('\/\\*<'+flag+'>\\*\/([\\s\\S]*?)\/\\*<\/'+flag+'>\\*\/');
      src = src.replace(reg, jcontent);
    //if set hashConfigBlock
    }else{
      grunt.log.writeln('U can set hashconfig to <'+flag+'></'+flag+'>"!');
      var scripthtml = '<script type="text/javascript">'+jcontent+'</script>\n',
        index = src.indexOf('</head>');
      index = index<0 ? 0 : index;
      src = src.substr(0, index)+scripthtml+src.substr(index);
    }

    grunt.file.write(config.hashConfigTo, src);
    grunt.log.writeln('File "' + chalk.cyan(config.hashConfigTo) + '" update hashConfig success.');
  }

};
